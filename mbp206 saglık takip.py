import random
import sqlite3
import tkinter as tk
import tkinter.messagebox as messagebox




# VeritabanÄ± baÄŸlantÄ±sÄ±
connection = sqlite3.connect('health_tracker.db')
cursor = connection.cursor()

# Tablo oluÅŸturma
cursor.execute('''CREATE TABLE IF NOT EXISTS health_data
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  calories INTEGER,
                  steps INTEGER,
                  sleep_duration INTEGER,
                  heart_rate INTEGER)''')
connection.commit()


def save_calories():
    calories = calories_entry.get()

    if int(calories) > 2000:
        message_label.config(text="GÃ¼nlÃ¼k kalori ihtiyacÄ±nÄ±zÄ± aÅŸtÄ±nÄ±z!", fg="black",bg="red")
    else:
        message_label.config(text="Kaloriler kaydedildi!", fg="white",bg="green")

    # Veriyi veritabanÄ±na kaydetme
    cursor.execute("INSERT INTO health_data (calories) VALUES (?)", (calories,))
    connection.commit()
    update_stats()


def save_steps():
    steps = steps_entry.get()

    if int(steps) < 10000:
        message_label.config(text="GÃ¼nlÃ¼k hedefin altÄ±ndasÄ±nÄ±z!", fg="black",bg="red")
    elif int(steps) >10000: message_label.config(text="Bravo !!! GÃ¼nlÃ¼k hedefini aÅŸtÄ±n.", fg="black",bg="green")
    else: message_label.config(text="AdÄ±mlar kaydedildi!", fg="black",bg="green")



    cursor.execute("INSERT INTO health_data (steps) VALUES (?)", (steps,))
    connection.commit()
    update_stats()


def save_sleep_duration():
    sleep_duration = sleep_duration_entry.get()

    if int(sleep_duration) < 7:
        message_label.config(text="Yetersiz uyku saÄŸlÄ±k sorunlarÄ±na sebep olabilir. Uyku dÃ¼zeninizi dÃ¼zeltmeniz Ã¶nerilir.", fg="black",bg="orange")
    elif int(sleep_duration) > 10:
        message_label.config(text="Kalk uykucu! GÃ¼nÃ¼ kaÃ§Ä±rÄ±yorsun", fg="black",bg="orange")
    else:
        message_label.config(text="Uyku sÃ¼resi kaydedildi!", fg="green")


    cursor.execute("INSERT INTO health_data (sleep_duration) VALUES (?)", (sleep_duration,))
    connection.commit()
    update_stats()


def save_heart_rate():
    heart_rate = heart_rate_entry.get()

    if int(heart_rate) < 60:
        message_label.config(text="NabzÄ±nÄ±z Ã§ok dÃ¼ÅŸÃ¼k! NabÄ±z Ã¶lÃ§erin doÄŸru takÄ±ldÄ±ÄŸÄ±nÄ± kontrol edin.", fg="black",bg="red")
    elif int(heart_rate) > 130:
        message_label.config(text="NabzÄ±nÄ±z normalin Ã¼zerinde! Meditasyon yapmanÄ±z Ã¶nerilir.", fg="black",bg="red")

    else:
        message_label.config(text="NabzÄ±nÄ±z normal!", fg="black",bg="orange")


    cursor.execute("INSERT INTO health_data (heart_rate) VALUES (?)", (heart_rate,))
    connection.commit()
    update_stats()


def reset_data():
    # Tabloyu sÄ±fÄ±rlama
    cursor.execute("DELETE FROM health_data")
    connection.commit()
    update_stats()
    message_label.config(text="Veriler sÄ±fÄ±rlandÄ±!", fg="black",bg="green")


def show_developers():
    messagebox.showinfo("YapÄ±mcÄ±lar", "YapÄ±mcÄ±lar:\n\n- Batuhan GÃ¶rgÃ¼n\n- Seymen KayÄ±kÃ§Ä±")


def enlighten_me():
    enlightening_texts = [
        "YetiÅŸkin bir kadÄ±nÄ±n gÃ¼nlÃ¼k 2.7 litre, erkeÄŸin ise 3.7 litre su iÃ§melidir. Su iÃ§meyi unutma! ğŸ˜Š",
        "YetiÅŸkin bir insanÄ±n ortalama 7-8 saat uyumasÄ± gerekir.",
        "KadÄ±nlarÄ±n gÃ¼nde yaklaÅŸÄ±k 2 bin kaloriye, erkeklerin ise 2 bin 500 kalori almasÄ± Ã¶nerilir.",
        "Biliyor muydun? Ä°nsan beyninin hafÄ±za kapasitesi, dÃ¶rt terabaytlÄ±k bir hard diskin kapasitesine eÅŸittir.",
        "VÃ¼cudun kan kaynaÄŸÄ± olmayan tek bÃ¶lÃ¼mÃ¼, gÃ¶zdeki korneadÄ±r. Oksijeni doÄŸrudan havadan alÄ±r.",
        "Beyinden gÃ¶nderilen sinir sinyalleri, saatte 274 km hÄ±zla hareket eder.",
        "Ä°nsan beyni, bir gÃ¼n iÃ§erisinde dÃ¼nyadaki tÃ¼m telefonlarÄ±n toplamÄ±ndan daha fazla elektrik sinyali Ã¼retir.",
        "Ä°nsan kalbi, hayatÄ± boyunca 182 milyon litre kan pompalar.",
        "Siz bu cÃ¼mleyi okurken, vÃ¼cudunuzda 50.000 hÃ¼cre Ã¶ldÃ¼ ve yenileri ile deÄŸiÅŸti.",
        "Ä°nsan bedenindeki kan damarlarÄ±nÄ±n toplam uzunluÄŸu, yaklaÅŸÄ±k 100.000 km'dir.",
        "VÃ¼cut Ä±sÄ±mÄ±zÄ±n yaklaÅŸÄ±k yÃ¼zde 80'ini baÅŸÄ±mÄ±zdan kaybederiz. SoÄŸuk havalarde bere takmayÄ± unutmayÄ±n<3",
        "Ä°nsan bedeninde kendi kendini iyileÅŸtiremeyen tek organ, diÅŸtir.O yÃ¼zden diÅŸlerinizi fÄ±rÃ§alayÄ±n",
        "Ä°nsan bedenindeki kalsiyumun yÃ¼zde 99'u, diÅŸlerde bulunur.",
    ]

    selected_text = random.choice(enlightening_texts)
    messagebox.showinfo("Beni AydÄ±nlat", selected_text)



def update_stats():
    # Verileri veritabanÄ±ndan Ã§ekme
    cursor.execute("SELECT SUM(calories) FROM health_data")
    total_calories = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(steps) FROM health_data")
    total_steps = cursor.fetchone()[0] or 0

    stats_label.config(text="AdÄ±mlar: {}   Kaloriler: {}".format(total_steps, total_calories))


# GUI penceresi
window = tk.Tk()
window.title("AkÄ±llÄ± SaÄŸlÄ±k Takip Sistemi")
window.geometry("500x500")
window.configure(bg="#1b2731")
# Kalori takibi
calories_label = tk.Label(window, text="GÃ¼nlÃ¼k Kalori:",bg="#ff9933")
calories_label.pack()
calories_entry = tk.Entry(window)
calories_entry.pack()
calories_button = tk.Button(window, text="Kaydet", command=save_calories,bg="#00cc00")
calories_button.pack()

# AdÄ±m takibi
steps_label = tk.Label(window, text="GÃ¼nlÃ¼k AdÄ±m:",bg="#ff9933")
steps_label.pack()
steps_entry = tk.Entry(window)
steps_entry.pack()
steps_button = tk.Button(window, text="Kaydet", command=save_steps,bg="#00cc00")
steps_button.pack()

# Uyku takibi
sleep_duration_label = tk.Label(window, text="Uyku SÃ¼resi:",bg="#ff9933")
sleep_duration_label.pack()
sleep_duration_entry = tk.Entry(window)
sleep_duration_entry.pack()
sleep_duration_button = tk.Button(window, text="Kaydet", command=save_sleep_duration,bg="#00cc00")
sleep_duration_button.pack()

# NabÄ±z Ã¶lÃ§Ã¼mÃ¼ i
heart_rate_label = tk.Label(window, text="NabÄ±z:",bg="#ff9933")
heart_rate_label.pack()
heart_rate_entry = tk.Entry(window)
heart_rate_entry.pack()
heart_rate_button = tk.Button(window, text="Kaydet", command=save_heart_rate,bg="#00cc00")
heart_rate_button.pack()

# Verileri sÄ±fÄ±rlama dÃ¼ÄŸmesi
reset_button = tk.Button(window, text="Verileri SÄ±fÄ±rla", command=reset_data,bg="#ff1a1a")
reset_button.pack()

# Mesaj gÃ¶sterme etiketi
message_label = tk.Label(window, text="")
message_label.pack()

# YapÄ±mcÄ± bilgileri dÃ¼ÄŸmesi
developers_button = tk.Button(window, text="YapÄ±mcÄ±lar", command=show_developers,bg="#ffcc00")
developers_button.place(x=430, y=5)

# Beni AydÄ±nlat dÃ¼ÄŸmesi
enlighten_button = tk.Button(window, text="Beni AydÄ±nlat", command=enlighten_me,bg="#ff9933")
enlighten_button.place(x=10, y=470)

# Ä°statistik gÃ¶sterge etiketi
stats_label = tk.Label(window, text="AdÄ±mlar: 0   Kaloriler: 0", bg="#ff9933", fg="black")
stats_label.pack()
def show_message_box():
    messagebox.showinfo("TeÅŸekkÃ¼rler", "UygulamamÄ±zÄ± kullandÄ±ÄŸÄ±nÄ±z iÃ§in teÅŸekkÃ¼r ederiz,UygulamamÄ±z geliÅŸtirilirler DÃ¼zenleyici olarak Pycharm, Dil olarak python ,VeritabanÄ± olarak ise SQL lite 3 kullanÄ±lmÄ±ÅŸtÄ±r . SaÄŸlÄ±klÄ± gÃ¼nler dileriz.")

def show_kaloriler_box():
    messagebox.showinfo("Kaloripedi","Tam BuÄŸday EkmeÄŸi 25g 63kcl                                                        Ã‡avdar EkmeÄŸi 25g  65kcl                                                           Beyaz Ekmek 25g kcl                                                                       Ä°nek SÃ¼tÃ¼(Tam YaÄŸlÄ±) 200ml 110kcal                                                Ä°nek SÃ¼tÃ¼ (YaÄŸsÄ±z) 200ml 93kcal                                               SÃ¼zme Peynir 30g 69kcal                                                             Beyaz Peynir(YarÄ±m YaÄŸlÄ± Ä°nek) 30g 60kcal                                        YoÄŸurt (YaÄŸlÄ±) 100ml 95kcal                                                         Elma 182g 1 orta boy  95kcal                                                          Armut 178g 1 orta boy 101kcal                                                           Portakal 130g 1 orta boy 62kcal                                                 Mandalina 76g 1 kÃ¼Ã§Ã¼k boy 40kcl                                                     Muz 118g 1 orta boy 105 kcal                                                 Domates 123g 1 orta boy 22kcal                                                      SalatalÄ±k 100g 1 orta boy   15kcal                                                        HavuÃ§ 61g 1 orta boy  25kcal                                                 FÄ±ndÄ±k 15g 10-12 adet 100kcal                                                  Badem 17g 12-14 adet  97kcal                                                ayÃ§iÃ§eÄŸi yaÄŸÄ± 5g 1 tatlÄ± kaÅŸÄ±ÄŸÄ±  45kcal                                                      ZeytinyaÄŸÄ± 5g 1 tatlÄ± kaÅŸÄ±ÄŸÄ± 50kcal                                               TereyaÄŸ 5g 1 tatlÄ± kaÅŸÄ±ÄŸÄ± 36kcal                                                     KÃ¶fte 30g 1 yumurta kadar 59kcal                                                    Dana Antrikot 50g 1.5 yumurta kadar 82kcal                                Tavuk (GÃ¶ÄŸÃ¼s) 50g 60kcal                                                        Tavuk (But) 30g  69kcal                                                                     tavuk (kanat) 30g 70kcal                                                               Levrek 101g  125kcal                                                              Mercimek Ã‡orbasÄ± 180g 99kcal                                               Tavuk Ã‡orbasÄ± 180g 60kcal                                                          Peynirli omlet 130g 2 yumurta + 1 peynir 254kcal ")

# kaloripedi butonu
kaloriler_button = tk.Button(window, text="Kaloripedi", command=show_kaloriler_box, bg="#ffcc00")
kaloriler_button.place(x=5, y=50)
# TeÅŸekkÃ¼r et butonu
thank_button = tk.Button(window, text="Bilgilendirme", command=show_message_box, bg="#ffcc00")
thank_button.place(x=5, y=5)
# vki hesaplama
weight_label = tk.Label(window, text="Kilonuz (kg):", bg="#ff9933")
weight_label.pack()
weight_entry = tk.Entry(window)
weight_entry.pack()

height_label = tk.Label(window, text="Boyunuz (cm):", bg="#ff9933")
height_label.pack()
height_entry = tk.Entry(window)
height_entry.pack()

def calculate_bmi():
    weight = float(weight_entry.get())
    height = float(height_entry.get()) / 100  # cm'yi metreye Ã§evirme

    bmi = weight / (height ** 2)

    if bmi < 18.5:
        result = "VÃ¼cut Kitle Endeksiniz: {:.2f}\n\n18.5 kg/mÂ² 'nin altÄ±ndasÄ±nÄ±z: Ä°deal kilonun altÄ±nda".format(bmi)
    elif 18.5 <= bmi <= 24.9:
        result = "VÃ¼cut Kitle Endeksiniz: {:.2f}\n\n18.5 kg/mÂ² ile 24.9 kg/mÂ² arasÄ±ndasÄ±nÄ±z: Ä°deal kiloda".format(bmi)
    elif 25 <= bmi <= 29.9:
        result = "VÃ¼cut Kitle Endeksiniz: {:.2f}\n\n25 kg/mÂ² ile 29.9 kg/mÂ² arasÄ±ndasÄ±nÄ±z: Ä°deal kilonun Ã¼stÃ¼nde".format(bmi)
    elif 30 <= bmi <= 39.9:
        result = "VÃ¼cut Kitle Endeksiniz: {:.2f}\n\n30 kg/mÂ² ile 39.9 kg/mÂ² arasÄ±ndasÄ±nÄ±z: Ä°deal kilonun Ã§ok Ã¼stÃ¼nde (obez)".format(bmi)
    else:
        result = "VÃ¼cut Kitle Endeksiniz: {:.2f}\n\n40 kg/mÂ² Ã¼zerindesiniz: Ä°deal kilonun Ã§ok Ã¼stÃ¼nde (morbid obez)".format(bmi)

    messagebox.showinfo("VÃ¼cut Kitle Endeksi", result)

# vki buttonu
bmi_button = tk.Button(window, text="VÃ¼cut Kitle Endeksi Hesapla", command=calculate_bmi, bg="#00cc00")
bmi_button.pack()



window.mainloop()

# sql baÄŸlantÄ±sÄ± kesen zamazingo
connection.close()



